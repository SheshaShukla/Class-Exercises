##################  Reading Data  #########################


## Reading data from program editor

## Create a matrix
input.matrix <- matrix(1:100, ncol = 5)
## See the data
input.matrix # we see that a matrix with 5 columns and 20 rows has been formed

# Uniform Random Numbers between 1 to 1000
# The Uniform Distribution
# These funcs provide infor about the uniform dist on the interval from min to max. 
# dunif gives the density 
# punif gives the distribution function 
# qunif gives the quantile function 
# runif generates random deviates
?runif
rr <-1000*runif(2)
rr
class(rr)

rr<-as.integer(1000*runif(2))
class(rr)
mode(rr)

unif <- as.integer(1000*runif(20))
plot(unif)
head(unif)
hist(unif)

# Scenario 
# Application: 300,000
# Selection: 60,000

Prob <- 60000/300000
Prob
Appl.num <- seq(1,300,1)
Appl.num
head(Appl.num)

?sample
selected <- sample(Appl.num,60,replace = F)
selected
selected.df <- data.frame(selected)

LETTERS[1:4]
sample(letters[1:4], 10, replace = T)

## Create a Data Frame
input.df <- data.frame(ID = 1:10, 
                       Class = sample(letters[1:4], 10, replace = TRUE),
                       Value = seq(1:5))
## View the data frame
View(input.df)
# we see that the data frame has 3 columns named ID, Class, and Value
# The data frame also has 10 rows of data

## See the column and row names
colnames(input.df)
names(input.df)
row.names(input.df)

## See the dimensions
dim(input.df)

## Set the Working Directory
getwd()

## Reading data from Comma separated file (csv)
input_csv.df <- read.csv(file="/Users/sheshashukla/Desktop/TRIMESTER 4/AMMA/data_2017/binary.csv")
View(input_csv.df)

# Reset directory and read file
setwd("/Users/sheshashukla/Desktop/TRIMESTER 4/AMMA/data_2017")
input_csv.df <- read.csv("binary.csv",header = T)

## See the structure of the data
str(input_csv.df)

# Summing the gre scores of all respondents
sum(input_csv.df$gre)

## Reading Date Values
input_wthdt.df <- read.csv("binary_withdate.csv")
str(input_wthdt.df)

tab <- data.frame(table(input_wthdt.df$application_date))
sum(tab$Freq)
# we see the date field has been read as factor

# read Date as Factor
input_wthdt.df <- read.csv("/Users/sheshashukla/Desktop/TRIMESTER 4/AMMA/data_2017/binary_withdate.csv", stringsAsFactors = F)
str(input_wthdt.df)
## ----------x----------x------------x------------- ##

## WORKING WITH DATES:-
d <-"2004-12-03"
d
class(d)
d1 <- as.Date(d)
class(d1)
mode(d1)

## find system date
s <-Sys.Date()
s

## Current date and time
c <-date()
c

# reading dates with other than default formats(use % in front of each)
# %d - Day (1, 2, etc.)
# %m - month (01-12)
# %b - month (Jan, Feb)
# %B - Month (January)
# %y - 2 digit year (92)
# %Y - 4 Digit year (1992)

?as.Date
d2 <-as.Date("12-January-2012",format="%d-%B-%Y") 
#converting character to Date
# If not specified, it will try "%Y-%m-%d" then "%Y/%m/%d" 
#on the first non-NA element, and give an error if neither works
d2
class(d2)
format(d2,"%B")


d3 <-as.Date("12-February-2012",format="%d-%B-%Y")
d3
d3 <-as.Date("12-February-12",format="%d-%B-%y")
d3
d4 <-as.Date("12-12-12",format="%d-%m-%y")
d4
d2

dd <- format(d2,"%d/%B/%Y")
dd

## Calculate age 
dob <-as.Date("12-Jan-1983",format="%d-%b-%Y")
dob
?difftime
age <- difftime(Sys.Date(),dob,units="days")
age
as.integer(as.numeric(age)/365) #as.integer(as.INTEGER(age)/365) - Same answer
# so numeric used to save space as integer is a larger data type

## Correct the date format
input_wthdt.df #pre existing data frame in R
input_wthdt.df$application_date1 <- as.Date(input_wthdt.df$application_date, format="%m/%d/%Y")
View(input_wthdt.df)
str(input_wthdt.df)

## Read the data specifying the Class of the data
input_wthdt.df1 <- read.csv("/Users/sheshashukla/Desktop/TRIMESTER 4/AMMA/data_2017/binary_withdate.csv", colClasses=c(application_date = 'myDate'))
str(input_wthdt.df1)

## Read data from the web
# You can directly read a file directly from the internet by specifying the URL
input_webdata.df <- read.table("http://www.stats.ox.ac.uk/pub/datasets/csb/ch11b.dat")
str(input_webdata.df)
View(input_webdata.df)

## Read the first few records of a dataset
head(input_webdata.df) # The first 6 rows of data have been displayed 
# head by default displays the first six rows

## Ques 1 : What if we need to display the first 10 rows instead?
head(input_webdata.df,10)
## Ques 2 : What if we want to display the last few rows?
tail(input_webdata.df)

csv_file <- read.table(file="C:\\Ram\\General 20150804 v1\\Trainings\\R Programming for Data Science\\data\\binary.csv",
                                header = TRUE, 
                                sep = ',')
# By deafult the separator for read.table is "space", 
# however, here, sep is used to give ','as the separator

## Read a Tab Delimited file
input_tabdlmtd.df <- read.table(file="C:\\Ram\\R for Data Science\\data\\tab_delimited_data.txt",
                                header = TRUE, 
                                sep = '\t')

head(input_tabdlmtd.df)

## We can use the same functions with a csv file 
## to read dates and modify formats with a tab-delimited file as well
input_dollar.df <- read.table(file="/Users/sheshashukla/Desktop/TRIMESTER 4/AMMA/data_2017/dollar_delimited_data.txt",
                                header = TRUE, 
                                sep = '$')
View(input_dollar.df)

## Read SAS dataset Data
install.packages("sas7bdat")
?library
library(sas7bdat)
library(help=sas7bdat)

bank_ins = read.sas7bdat("/Users/sheshashukla/Desktop/TRIMESTER 4/AMMA/data_2017/bank_additional_full.sas7bdat")
View(bank_ins)
names(bank_ins)
str(bank_ins)

library(foreign)
library(help=foreign)

# Read SPSS file
spss <- data.frame(read.spss("/Users/sheshashukla/Desktop/TRIMESTER 4/AMMA/data_2017/p004.sav"))
names(spss)
View(spss)
?table
table(spss$CURRENTM)

install.packages("sqldf")
library(help=sqldf)

############### sqldf NOT WORKING ##################
sum.tb <- sqldf("select PROTEIN,count(*) 
                        from spss 
                 where PROTEIN>1
                group by PROTEIN")
View(sum.tb)

## Read Data From Facebook
install.packages(c("Rfacebook","RCurl","rjson"))

library(Rfacebook)
library(RCurl)
library(rjson)

library(help=Rfacebook)
# connecting to Facebook
# go to https://developers.facebook.com/tools/explorer and get your access token
#then paste it in the code below and run it
accessToken <-"EAACEdEose0cBAHJER61o6UeX37Ur5Lr1HyZANrNzKCOZBZB2arXIZBOcbZBp5Q9ZBHUxJ9aelumfNPBp4xoZBj1UdWowuBjsy0ZBEwBnfc8ZAllaEKxSWTkgAu9tVKIF3bozozIB9XhibRS65yJ9W0RziErSodhFq2AGl3KY1hxJ7YFce4CgZA4tgsR1j0kVxkZBKMZD"

# Get data from a company page
############## getPage Function not found ############
flipkartPage <-getPage(page="flipkart",
                       token=accessToken,
                       n=10)

flipkartPage <-getPage(page="flipkart",
                       token=accessToken,
                       n=150)



##################  Writing Data  #########################

one_row <-bank_ins[,3]
one_row
bank_ins.smpl <- bank_ins[1:1000,]
View(bank_ins.smpl)

## Save the R object
save(bank_ins,file="bank_ins.smpl.Rda")
# remove
rm(bank_ins.smpl)
rm(bank_ins)

## Load the data back
names(bank_ins)
load("bank_ins.smpl.Rda")
names(bank_ins)

## install and load datasets package
install.packages("datasets")
require(datasets)
library(help="datasets")

## Save the data as a csv file
tt <- mtcars
names(tt)
?write.csv
write.csv(mtcars, "mtcars.csv") #converts it to a data frame if not one
tt$carmodel <- row.names(mtcars)
row.names(tt) <- NULL
write.csv(tt, "/Users/sheshashukla/Desktop/TRIMESTER 4/AMMA/data_2017/mtcars.csv",row.names=F)

## Save the data as a Tab Delimited file
write.table(mtcars, "mtcars.txt", sep = '%', quote = FALSE, row.names=F)

## write to file without column names
write.table(mtcars, 
            "mtcars_noheader.txt", 
            sep = '%', 
            quote = FALSE, 
            row.names=F,
            col.names = F)
View(mtcars)

write.csv(mtcars, 
            "mtcars_noheader1.txt", 
            quote = FALSE, 
            row.names=F,
            col.names = F)

write.table(mtcars, 
            "mtcars_noheadercsv.csv", 
            sep = ',', 
            quote = FALSE, 
            row.names=F,
            col.names = F)

########### ISSUES WITH CODE FROM HERE #############
?attach
attach(male)
names(male)
summary(Age)
rm(Age)
Age
mean(male$Age)

attach(male)
mean(Age)
myfile <- read.table(text="MyName Age
                           Ram 38
                           Shyam 25", header=T)
write.csv(myfile,file="myfile.csv")
write.table(myfile, 
            "myfile.txt", 
            sep = '$', 
            row.names=F,
            col.names = F)

?rnorm
students <- data.frame(Name= c("Ram","Dinesh","Mona","Sona"),
                      Gender=c("Male","Male","Female","Female"),
                      Age =rnorm(4,50,20))
View(students)

write.csv(students,
          file="students.csv",
          row.names = F)
getwd()
